name: Check for updates
on:
  workflow_dispatch:
  schedule:
    # Github recommends avoiding full hours
    # See https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
    - cron: "38 1,9,17 * * *" # At minute 38 every 8 hours

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.nvcheck.outputs.packages }}
      changes: ${{ steps.nvcheck.outputs.changes }}
      urls: ${{ steps.nvcheck.outputs.urls }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.SSH_KEY_PRIVATE }}
      - name: Pull base image
        run: docker pull quay.io/aminvakil/archlinux:latest
      - name: Prepare base image and mount packages
        run: |
          container_id=$(mktemp)
          docker run --detach --privileged --cgroup-parent=docker.slice --cgroupns private --tmpfs /tmp --tmpfs /run --tmpfs /run/lock -v "${PWD}":/pkgbuilds quay.io/aminvakil/archlinux:latest > "${container_id}"
          docker exec "$(cat ${container_id})" pacman -Syu --noconfirm
          docker exec "$(cat ${container_id})" pacman -S nvchecker git pyalpm python-packaging python-jq --noconfirm
          echo "container_id=$container_id" >> $GITHUB_ENV
      - name: Run nvchecker
        id: nvcheck
        run: |
          sudo apt-get -y install yq # needed for tomlq
          docker exec "$(cat ${container_id})" nvchecker --failures -c /pkgbuilds/nvchecker.toml
          nvcmp_output=$(docker exec "$(cat ${container_id})" nvcmp -c /pkgbuilds/nvchecker.toml -j)
          if [ -z "$nvcmp_output" ]; then
            echo "::notice ::No new versions found"
            exit 0
          fi

          pkgs=$(echo "$nvcmp_output" | jq -c '[.[].name]')
          echo "packages=$pkgs" >> $GITHUB_OUTPUT
          echo "changes=$nvcmp_output" >> $GITHUB_OUTPUT

          # Calculate release URLs
          urls=''
          pkgs=$(echo "$nvcmp_output" | jq -c '[.[].name]')
          while read -r pkg; do
          version=$(echo "$nvcmp_output" | jq -r '.[] | select(.name=="'${pkg}'").newver')
          expr=$(printf '."%s"' "$pkg")
          src=$(tomlq -r ${expr}.source nvchecker.toml)

          url=''
          if [ "${src}" == "github" ]; then
            repo=$(tomlq -r ${expr}.github nvchecker.toml)
            pfx=$(tomlq -r ${expr}.prefix nvchecker.toml)
            url=$(printf "https://github.com/${repo}/releases/tag/${pfx}${version}")
          else
            url=$(tomlq -r ${expr}.release_url nvchecker.toml)
            if [ -z "$url" ]; then
              url=$(tomlq -r ${expr}.url nvchecker.toml)
            fi
            url=$(echo "$url" | sed 's/__version__/'${version}'/g')
          fi

          if [ -z "$url" ]; then
            url='None'
          fi

          urls+=$(echo "${pkg}=${url}" | jq -R './"=" | {key:first,value:last}')
          done <<< "$(echo $pkgs | jq -r '.[]')"

          urls=$(echo "$urls" | jq -cs 'from_entries')
          echo "urls=$urls" >> $GITHUB_OUTPUT
      - name: Stop and remove container
        run: |
          docker rm -f "$(cat ${container_id})"

  create-prs:
    name: Create PR for ${{ matrix.package }}
    needs: define-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.define-matrix.outputs.packages) }}
    steps:
      - name: Identify version and release URL
        id: identify
        run: |
          newver=$(echo '${{ needs.define-matrix.outputs.changes }}' | jq -r '.[] | select(.name=="${{ matrix.package }}").newver')
          url=$(echo '${{ needs.define-matrix.outputs.urls }}' | jq -r '."${{ matrix.package }}"')
          echo "pkgver=$newver" >> $GITHUB_OUTPUT
          echo "url=$url" >> $GITHUB_OUTPUT
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.SSH_KEY_PRIVATE }}
      - name: Prepare commit message
        uses: ./.github/actions/prepare-commit-msg
        id: prep
        with:
          pkgname: ${{ matrix.package }}
          new-pkgver: ${{ steps.identify.outputs.pkgver }}
      - name: Update PKGBUILD and generate diff
        uses: ./.github/actions/updpkgsums
        id: update
        with:
          pkgname: ${{ matrix.package }}
          new-pkgver: ${{ steps.identify.outputs.pkgver }}
          skip-makepkg: ${{ matrix.package == 'firefox-vaapi' && 'yes' || 'no' }}
      - name: Configure git and SSH
        uses: ./.github/actions/configure-git-ssh
        id: configure
        with:
          ssh-priv-key: ${{ secrets.SSH_KEY_PRIVATE }}
          commit-email: ${{ secrets.GIT_EMAIL }}
          commit-user: ${{ secrets.GIT_USER }}
      - name: Create PR
        if: github.event_name != 'pull_request'
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.prep.outputs.commit-msg }}
          committer: ${{ secrets.GIT_USER }} <${{ secrets.GIT_EMAIL }}>
          author: ${{ secrets.GIT_USER }} <${{ secrets.GIT_EMAIL }}>
          branch: aur/${{ matrix.package }}
          title: "Update ${{ matrix.package }} to ${{ steps.identify.outputs.pkgver }}"
          body: ${{ steps.identify.outputs.url }}
          delete-branch: true
          signoff: false
          draft: false